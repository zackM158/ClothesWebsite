//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfConsoleClient.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProductsWithManufacturers", ReplyAction="http://tempuri.org/IProductService/GetAllProductsWithManufacturersResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> GetAllProductsWithManufacturers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProductsWithManufacturers", ReplyAction="http://tempuri.org/IProductService/GetAllProductsWithManufacturersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetAllProductsWithManufacturersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        int AddProduct(Entities.Product product, string fileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(Entities.Product product, string fileType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        string UpdateProduct(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task<string> UpdateProductAsync(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByManufacturer", ReplyAction="http://tempuri.org/IProductService/GetProductsByManufacturerResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> GetProductsByManufacturer(string manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByManufacturer", ReplyAction="http://tempuri.org/IProductService/GetProductsByManufacturerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetProductsByManufacturerAsync(string manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByCategory", ReplyAction="http://tempuri.org/IProductService/GetProductsByCategoryResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> GetProductsByCategory(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByCategory", ReplyAction="http://tempuri.org/IProductService/GetProductsByCategoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetProductsByCategoryAsync(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        string DeleteProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task<string> DeleteProductAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ValidCategory", ReplyAction="http://tempuri.org/IProductService/ValidCategoryResponse")]
        string ValidCategory(string initalCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ValidCategory", ReplyAction="http://tempuri.org/IProductService/ValidCategoryResponse")]
        System.Threading.Tasks.Task<string> ValidCategoryAsync(string initalCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductById", ReplyAction="http://tempuri.org/IProductService/GetProductByIdResponse")]
        WcfService.ProductDto GetProductById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductById", ReplyAction="http://tempuri.org/IProductService/GetProductByIdResponse")]
        System.Threading.Tasks.Task<WcfService.ProductDto> GetProductByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SearchProducts", ReplyAction="http://tempuri.org/IProductService/SearchProductsResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> SearchProducts(string searchTerm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SearchProducts", ReplyAction="http://tempuri.org/IProductService/SearchProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> SearchProductsAsync(string searchTerm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SavedProducts", ReplyAction="http://tempuri.org/IProductService/SavedProductsResponse")]
        System.Collections.Generic.List<WcfService.ProductDto> SavedProducts(string savedProductsString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SavedProducts", ReplyAction="http://tempuri.org/IProductService/SavedProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> SavedProductsAsync(string savedProductsString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : WcfConsoleClient.ProductServiceReference.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<WcfConsoleClient.ProductServiceReference.IProductService>, WcfConsoleClient.ProductServiceReference.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> GetAllProductsWithManufacturers() {
            return base.Channel.GetAllProductsWithManufacturers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetAllProductsWithManufacturersAsync() {
            return base.Channel.GetAllProductsWithManufacturersAsync();
        }
        
        public int AddProduct(Entities.Product product, string fileType) {
            return base.Channel.AddProduct(product, fileType);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(Entities.Product product, string fileType) {
            return base.Channel.AddProductAsync(product, fileType);
        }
        
        public string UpdateProduct(Entities.Product product) {
            return base.Channel.UpdateProduct(product);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductAsync(Entities.Product product) {
            return base.Channel.UpdateProductAsync(product);
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> GetProductsByManufacturer(string manufacturer) {
            return base.Channel.GetProductsByManufacturer(manufacturer);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetProductsByManufacturerAsync(string manufacturer) {
            return base.Channel.GetProductsByManufacturerAsync(manufacturer);
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> GetProductsByCategory(string category) {
            return base.Channel.GetProductsByCategory(category);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> GetProductsByCategoryAsync(string category) {
            return base.Channel.GetProductsByCategoryAsync(category);
        }
        
        public string DeleteProduct(int id) {
            return base.Channel.DeleteProduct(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteProductAsync(int id) {
            return base.Channel.DeleteProductAsync(id);
        }
        
        public string ValidCategory(string initalCategory) {
            return base.Channel.ValidCategory(initalCategory);
        }
        
        public System.Threading.Tasks.Task<string> ValidCategoryAsync(string initalCategory) {
            return base.Channel.ValidCategoryAsync(initalCategory);
        }
        
        public WcfService.ProductDto GetProductById(int id) {
            return base.Channel.GetProductById(id);
        }
        
        public System.Threading.Tasks.Task<WcfService.ProductDto> GetProductByIdAsync(int id) {
            return base.Channel.GetProductByIdAsync(id);
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> SearchProducts(string searchTerm) {
            return base.Channel.SearchProducts(searchTerm);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> SearchProductsAsync(string searchTerm) {
            return base.Channel.SearchProductsAsync(searchTerm);
        }
        
        public System.Collections.Generic.List<WcfService.ProductDto> SavedProducts(string savedProductsString) {
            return base.Channel.SavedProducts(savedProductsString);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfService.ProductDto>> SavedProductsAsync(string savedProductsString) {
            return base.Channel.SavedProductsAsync(savedProductsString);
        }
    }
}
